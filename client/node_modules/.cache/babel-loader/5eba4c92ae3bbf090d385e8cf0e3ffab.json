{"ast":null,"code":"var _jsxFileName = \"/Users/nao/code/bathroom/client/src/App.js\";\nimport React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport WaitingRoom from './WaitingRoom';\nimport Stall from './Stall';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pusher = new Pusher('93d5b6db6095187f5ef6', {\n      cluster: 'us2',\n      encrypted: true\n    });\n    this.state = {\n      currentView: null,\n      stalls: [] // array of Stall components\n\n    };\n    this.max_occupancy = 1; // ADJUST AS NEEDED\n\n    this.num_stalls = 1; // ADJUST AS NEEDED\n\n    this.handleEnterStall = this.handleEnterStall.bind(this);\n    this.updateOccupants = this.updateOccupants.bind(this); // this.handleVacancyChange = this.handleVacancyChange.bind(this);\n  }\n\n  handleEnterStall(e) {\n    var stallList = Array.from(this.state.stalls);\n    var stallEntered = false;\n\n    for (var i = 0; !stallEntered && i < this.state.stalls.length; i++) {\n      var currentStall = { ...this.state.stalls[i]\n      };\n\n      if (currentStall.occupants < this.max_occupancy) {\n        // this.updateOccupants(i, currentStall.occupants+1);\n        this.setState(currentState => {\n          return {\n            currentView: /*#__PURE__*/React.createElement(Stall, {\n              id: i,\n              pusher: this.pusher,\n              max: this.max_occupancy,\n              onOccupancyChange: this.updateOccupants,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 26\n              }\n            })\n          };\n        }, console.log(this.state.stalls));\n        stallEntered = true;\n      } else {\n        console.log(`Stall ${i} full`);\n      }\n    }\n\n    if (!stallEntered) {\n      alert('no vacant stalls available!');\n    }\n  }\n\n  updateOccupants(stallId, numOccupants) {\n    console.log(`updating stall ${stallId} with ${numOccupants} occupant(s)`);\n    console.log(typeof stallId);\n    let stallsCopy = Array.from(this.state.stalls);\n    stallsCopy[stallId].occupants = numOccupants;\n    this.setState(currentState => {\n      return {\n        stalls: stallsCopy\n      };\n    });\n  }\n\n  componentWillMount() {\n    // create stalls\n    var stallList = [];\n\n    for (var i = 0; i < this.num_stalls; i++) {\n      var stallId = i;\n      let stall = {\n        id: i,\n        occupants: 0\n      }; //let stallComponent = <Stall id={stallId} pusher={this.pusher} max={this.max_occupancy} vacant=\"true\"/>;\n\n      stallList.push(stall);\n    }\n\n    this.setState(currentState => {\n      return {\n        stalls: stallList,\n        currentView: /*#__PURE__*/React.createElement(WaitingRoom, {\n          onEnterStall: this.handleEnterStall,\n          pusher: this.pusher,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 22\n          }\n        })\n      };\n    });\n  } // componentDidMount() {\n  // }\n  // componentWillUnmount() {\n  // }\n  // updateVisitors(members) {\n  //   this.setState({\n  //     visitors: members,\n  //   },\n  //   // console.log('number of visitors updated')\n  //   )\n  // }\n\n\n  render() {\n    const stalls = this.state.stalls.map(stall => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, \"Stall \", stall.id, \": \", stall.occupants, \"/\", this.max_occupancy));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, \"Number of Stalls: \", this.num_stalls, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 44\n      }\n    }), stalls, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), this.state.currentView);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nao/code/bathroom/client/src/App.js"],"names":["React","Component","Pusher","WaitingRoom","Stall","App","constructor","props","pusher","cluster","encrypted","state","currentView","stalls","max_occupancy","num_stalls","handleEnterStall","bind","updateOccupants","e","stallList","Array","from","stallEntered","i","length","currentStall","occupants","setState","currentState","console","log","alert","stallId","numOccupants","stallsCopy","componentWillMount","stall","id","push","render","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAc,IAAIN,MAAJ,CAAW,sBAAX,EAAmC;AAC/CO,MAAAA,OAAO,EAAE,KADsC;AAE/CC,MAAAA,SAAS,EAAE;AAFoC,KAAnC,CAAd;AAIA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,IADF;AAEXC,MAAAA,MAAM,EAAE,EAFG,CAEC;;AAFD,KAAb;AAIA,SAAKC,aAAL,GAAqB,CAArB,CAViB,CAUO;;AACxB,SAAKC,UAAL,GAAkB,CAAlB,CAXiB,CAWI;;AACrB,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB,CAbiB,CAcjB;AACD;;AAEDD,EAAAA,gBAAgB,CAACG,CAAD,EAAI;AAClB,QAAIC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAKX,KAAL,CAAWE,MAAtB,CAAhB;AACA,QAAIU,YAAY,GAAG,KAAnB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgB,CAACD,YAAD,IAAiBC,CAAC,GAAG,KAAKb,KAAL,CAAWE,MAAX,CAAkBY,MAAvD,EAA+DD,CAAC,EAAhE,EAAoE;AAClE,UAAIE,YAAY,GAAG,EAAC,GAAG,KAAKf,KAAL,CAAWE,MAAX,CAAkBW,CAAlB;AAAJ,OAAnB;;AACA,UAAIE,YAAY,CAACC,SAAb,GAAyB,KAAKb,aAAlC,EAAiD;AAC/C;AACA,aAAKc,QAAL,CAAcC,YAAY,IAAI;AAC5B,iBAAO;AACLjB,YAAAA,WAAW,eAAE,oBAAC,KAAD;AAAO,cAAA,EAAE,EAAEY,CAAX;AAAc,cAAA,MAAM,EAAE,KAAKhB,MAA3B;AAAmC,cAAA,GAAG,EAAE,KAAKM,aAA7C;AAA4D,cAAA,iBAAiB,EAAE,KAAKI,eAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADR,WAAP;AAGD,SAJD,EAIGY,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAL,CAAWE,MAAvB,CAJH;AAKAU,QAAAA,YAAY,GAAG,IAAf;AACD,OARD,MASK;AACHO,QAAAA,OAAO,CAACC,GAAR,CAAa,SAAQP,CAAE,OAAvB;AACD;AACF;;AAED,QAAI,CAACD,YAAL,EAAmB;AACjBS,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACD;AAEF;;AAEDd,EAAAA,eAAe,CAACe,OAAD,EAAUC,YAAV,EAAwB;AACrCJ,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBE,OAAQ,SAAQC,YAAa,cAA3D;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOE,OAAnB;AACA,QAAIE,UAAU,GAAGd,KAAK,CAACC,IAAN,CAAW,KAAKX,KAAL,CAAWE,MAAtB,CAAjB;AACAsB,IAAAA,UAAU,CAACF,OAAD,CAAV,CAAoBN,SAApB,GAAgCO,YAAhC;AACA,SAAKN,QAAL,CAAcC,YAAY,IAAI;AAC5B,aAAO;AACLhB,QAAAA,MAAM,EAAEsB;AADH,OAAP;AAGD,KAJD;AAKD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB;AACA,QAAIhB,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,UAAzB,EAAqCS,CAAC,EAAtC,EAA0C;AACxC,UAAIS,OAAO,GAAGT,CAAd;AACA,UAAIa,KAAK,GAAG;AAAEC,QAAAA,EAAE,EAAEd,CAAN;AAASG,QAAAA,SAAS,EAAE;AAApB,OAAZ,CAFwC,CAGxC;;AACAP,MAAAA,SAAS,CAACmB,IAAV,CAAeF,KAAf;AACD;;AACD,SAAKT,QAAL,CAAcC,YAAY,IAAI;AAC5B,aAAO;AACLhB,QAAAA,MAAM,EAAEO,SADH;AAELR,QAAAA,WAAW,eAAE,oBAAC,WAAD;AAAa,UAAA,YAAY,EAAE,KAAKI,gBAAhC;AAAkD,UAAA,MAAM,EAAE,KAAKR,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,OAAP;AAID,KALD;AAMD,GAvEyB,CAyE1B;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAgC,EAAAA,MAAM,GAAG;AACP,UAAM3B,MAAM,GAAG,KAAKF,KAAL,CAAWE,MAAX,CAAkB4B,GAAlB,CAAuBJ,KAAD,iBACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAWA,KAAK,CAACC,EAAjB,QAAuBD,KAAK,CAACV,SAA7B,OAAyC,KAAKb,aAA9C,CADa,CAAf;AAGA,wBACE;AAAK,MAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACqB,KAAKC,UAD1B,eACqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADrC,EAEGF,MAFH,eAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFV,EAGG,KAAKF,KAAL,CAAWC,WAHd,CADF;AAOD;;AAlGyB;;AAsG5B,eAAeP,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport WaitingRoom from './WaitingRoom';\nimport Stall from './Stall';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pusher = new Pusher('93d5b6db6095187f5ef6', {\n      cluster: 'us2',\n      encrypted: true,\n    });\n    this.state = {\n      currentView: null,\n      stalls: [], // array of Stall components\n    };\n    this.max_occupancy = 1; // ADJUST AS NEEDED\n    this.num_stalls = 1; // ADJUST AS NEEDED\n    this.handleEnterStall = this.handleEnterStall.bind(this);\n    this.updateOccupants = this.updateOccupants.bind(this);\n    // this.handleVacancyChange = this.handleVacancyChange.bind(this);\n  }\n\n  handleEnterStall(e) {\n    var stallList = Array.from(this.state.stalls);\n    var stallEntered = false;\n\n    for (var i = 0; !stallEntered && i < this.state.stalls.length; i++) {\n      var currentStall = {...this.state.stalls[i]};\n      if (currentStall.occupants < this.max_occupancy) {\n        // this.updateOccupants(i, currentStall.occupants+1);\n        this.setState(currentState => {\n          return {\n            currentView: <Stall id={i} pusher={this.pusher} max={this.max_occupancy} onOccupancyChange={this.updateOccupants} />,\n          };\n        }, console.log(this.state.stalls));\n        stallEntered = true;\n      }\n      else {\n        console.log(`Stall ${i} full`);\n      }\n    }\n\n    if (!stallEntered) {\n      alert('no vacant stalls available!');\n    }\n\n  }\n\n  updateOccupants(stallId, numOccupants) {\n    console.log(`updating stall ${stallId} with ${numOccupants} occupant(s)`);\n    console.log(typeof stallId)\n    let stallsCopy = Array.from(this.state.stalls);\n    stallsCopy[stallId].occupants = numOccupants;\n    this.setState(currentState => {\n      return {\n        stalls: stallsCopy,\n      }\n    });\n  }\n\n  componentWillMount() {\n    // create stalls\n    var stallList = [];\n    for (var i = 0; i < this.num_stalls; i++) {\n      var stallId = i;\n      let stall = { id: i, occupants: 0 };\n      //let stallComponent = <Stall id={stallId} pusher={this.pusher} max={this.max_occupancy} vacant=\"true\"/>;\n      stallList.push(stall);\n    }\n    this.setState(currentState => {\n      return {\n        stalls: stallList,\n        currentView: <WaitingRoom onEnterStall={this.handleEnterStall} pusher={this.pusher} />\n      };\n    });\n  }\n\n  // componentDidMount() {\n  // }\n\n  // componentWillUnmount() {\n  // }\n\n  // updateVisitors(members) {\n  //   this.setState({\n  //     visitors: members,\n  //   },\n  //   // console.log('number of visitors updated')\n  //   )\n  // }\n\n  render() {\n    const stalls = this.state.stalls.map((stall) =>\n      <li>Stall {stall.id}: {stall.occupants}/{this.max_occupancy}</li>\n    );\n    return (\n      <div id=\"app\">\n        Number of Stalls: {this.num_stalls}<br/>\n        {stalls}<br/>\n        {this.state.currentView}\n      </div>\n    );\n  }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}