{"ast":null,"code":"var _jsxFileName = \"/Users/nao/code/bathroom/client/src/App.js\";\nimport React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      newComment: '',\n      comments: []\n    };\n\n    this.updateInput = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.postComment = event => {\n      event.preventDefault();\n      const {\n        username,\n        newComment\n      } = this.state;\n      if (username.trim() === '' || newComment.trim() === '') return;\n      const data = {\n        name: username,\n        text: newComment,\n        votes: 0\n      };\n      axios.post('http://localhost:5000/comment', data).then(() => {\n        this.setState({\n          username: '',\n          newComment: ''\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.vote = (id, num) => {\n      axios.post('/vote', {\n        id,\n        vote: num\n      });\n    };\n  }\n\n  componentDidMount() {\n    const pusher = new Pusher('93d5b6db6095187f5ef6', {\n      cluster: 'us2',\n      encrypted: true\n    });\n    axios.get('http://localhost:5000').then(({\n      data\n    }) => {\n      this.setState({\n        comments: [...data]\n      });\n    }).catch(error => console.log(error));\n    const channel = pusher.subscribe('comments');\n    channel.bind('new-comment', data => {\n      console.log('bind called');\n      this.setState(prevState => {\n        const {\n          comments\n        } = prevState;\n        console.log(\"comments: \");\n        console.log(comments);\n        console.log(\"data.comment: \");\n        console.log(data.comment);\n        /* a-t solution */\n\n        const commentsCopy = Array.from(comments);\n        console.log(\"commentsCopy before: \");\n        console.log(commentsCopy);\n        commentsCopy.push(data.comment);\n        console.log(\"commentsCopy after: \");\n        console.log(commentsCopy);\n        /* END a-t solution */\n\n        /* original code */\n        // comments.push(data.comment);\n        // console.log(\"comments after: \");\n        // console.log(comments);\n\n        /* END original code */\n\n        return {\n          comments: commentsCopy // a-t\n          // comments, // original\n\n        };\n      });\n    });\n    channel.bind('new-vote', data => {\n      let {\n        comments\n      } = this.state;\n      comments = comments.map(e => {\n        if (e._id === data.comment._id) {\n          return data.comment;\n        }\n\n        return e;\n      });\n      this.setState({\n        comments\n      });\n    });\n  }\n\n  render() {\n    const {\n      username,\n      newComment,\n      comments\n    } = this.state;\n    const userComments = comments.map(e => /*#__PURE__*/React.createElement(\"article\", {\n      className: \"comment\",\n      key: e._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"comment-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, e.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"comment-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, e.text), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"voting\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vote-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"upvote\",\n      onClick: () => this.vote(e._id, 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, \"Upvote\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"downvote\",\n      onClick: () => this.vote(e._id, -1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, \"Downvote\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"votes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, \"Votes: \", e.votes))));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"article\", {\n      className: \"post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, \"Interesting Video\"), /*#__PURE__*/React.createElement(\"iframe\", {\n      title: \"video\",\n      width: \"560\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/PC60fAKJiek\",\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      allowfullscreen: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, \"Leave a comment if you enjoyed the video above\")), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"comments-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.postComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, \"Name:\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"username\",\n      name: \"username\",\n      id: \"username\",\n      type: \"name\",\n      value: username,\n      onChange: this.updateInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"new-comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, \"Comment:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      className: \"comment\",\n      name: \"newComment\",\n      id: \"new-comment\",\n      value: newComment,\n      onChange: this.updateInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, \"Have your say\"))), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"comments-section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }, userComments));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nao/code/bathroom/client/src/App.js"],"names":["React","Component","Pusher","axios","App","state","username","newComment","comments","updateInput","event","name","value","target","setState","postComment","preventDefault","trim","data","text","votes","post","then","catch","error","console","log","vote","id","num","componentDidMount","pusher","cluster","encrypted","get","channel","subscribe","bind","prevState","comment","commentsCopy","Array","from","push","map","e","_id","render","userComments"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    username: '',\n    newComment: '',\n    comments: [],\n  };\n\n  updateInput = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  postComment = event => {\n    event.preventDefault();\n    const { username, newComment } = this.state;\n    if (username.trim() === '' || newComment.trim() === '') return;\n\n    const data = {\n      name: username,\n      text: newComment,\n      votes: 0,\n    };\n\n    axios\n      .post('http://localhost:5000/comment', data)\n      .then(() => {\n        this.setState({\n          username: '',\n          newComment: '',\n        });\n      })\n      .catch(error => console.log(error));\n  };\n\n  vote = (id, num) => {\n    axios.post('/vote', {\n      id,\n      vote: num,\n    });\n  };\n\n  componentDidMount() {\n    const pusher = new Pusher('93d5b6db6095187f5ef6', {\n      cluster: 'us2',\n      encrypted: true,\n    });\n\n    axios.get('http://localhost:5000').then(({ data }) => {\n      this.setState({\n        comments: [...data],\n      });\n    }).catch(error => console.log(error))\n\n    const channel = pusher.subscribe('comments');\n    channel.bind('new-comment', data => {\n      console.log('bind called');\n      this.setState(prevState => {\n        const { comments } = prevState;\n        \n        console.log(\"comments: \");\n        console.log(comments)\n        console.log(\"data.comment: \");\n        console.log(data.comment);\n\n        /* a-t solution */\n        const commentsCopy = Array.from(comments);\n      \n        console.log(\"commentsCopy before: \");\n        console.log(commentsCopy)\n        \n        commentsCopy.push(data.comment);\n\n        console.log(\"commentsCopy after: \");\n        console.log(commentsCopy)\n        /* END a-t solution */\n\n        /* original code */\n        // comments.push(data.comment);\n\n        // console.log(\"comments after: \");\n        // console.log(comments);\n        /* END original code */\n\n        return {\n          comments: commentsCopy, // a-t\n          // comments, // original\n        };\n      });\n    });\n    channel.bind('new-vote', data => {\n      let { comments } = this.state;\n      comments = comments.map(e => {\n        if (e._id === data.comment._id) {\n          return data.comment;\n        }\n        return e;\n      });\n      this.setState({\n        comments,\n      });\n    });\n  }\n\n  render() {\n    const { username, newComment, comments } = this.state;\n\n    const userComments = comments.map(e => (\n      <article className=\"comment\" key={e._id}>\n        <h1 className=\"comment-user\">{e.name}</h1>\n        <p className=\"comment-text\">{e.text}</p>\n        <div className=\"voting\">\n          <div className=\"vote-buttons\">\n            <button className=\"upvote\" onClick={() => this.vote(e._id, 1)}>\n              Upvote\n            </button>\n            <button className=\"downvote\" onClick={() => this.vote(e._id, -1)}>\n              Downvote\n            </button>\n          </div>\n          <div className=\"votes\">Votes: {e.votes}</div>\n        </div>\n      </article>\n    ));\n\n    return (\n      <div className=\"App\">\n        <article className=\"post\">\n          <h1>Interesting Video</h1>\n          <iframe\n            title=\"video\"\n            width=\"560\"\n            height=\"315\"\n            src=\"https://www.youtube.com/embed/PC60fAKJiek\"\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowfullscreen\n          />\n          <p>Leave a comment if you enjoyed the video above</p>\n        </article>\n        <section className=\"comments-form\">\n          <form onSubmit={this.postComment}>\n            <label htmlFor=\"username\">Name:</label>\n            <input\n              className=\"username\"\n              name=\"username\"\n              id=\"username\"\n              type=\"name\"\n              value={username}\n              onChange={this.updateInput}\n            />\n\n            <label htmlFor=\"new-comment\">Comment:</label>\n            <textarea\n              className=\"comment\"\n              name=\"newComment\"\n              id=\"new-comment\"\n              value={newComment}\n              onChange={this.updateInput}\n            />\n            <button type=\"submit\">Have your say</button>\n          </form>\n        </section>\n        <section className=\"comments-section\">{userComments}</section>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}