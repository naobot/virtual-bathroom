{"version":3,"sources":["Button.js","Hallway.js","WaitingRoom.js","Stall.js","Chatlist.js","Chatbox.js","StallRight.js","Room.js","Bathroom.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","this","props","buttonText","PureComponent","Hallway","handleEnterBathroomClick","bind","e","onEnterBathroom","id","className","data-depth","WaitingRoom","pusher","state","me","occupants","count","countOccupants","sortByEntryTime","handleEnterRoomClick","presenceChannel","subscribe","setState","members","updateOccupants","console","log","each","member","info","isSpy","onOccupancyChange","onEnterRoom","sorted","forEach","push","sort","a","b","parseInt","entry_time","trueOccupants","trueOccupantsList","visitor","toString","key","ahead","map","indexOf","enterMessage","Component","Stall","handleNavigationClick","target","stallId","direction","children","Chatlist","stallMap","myHex","getColorStyle","hex","color","chats","chat","style","userhex","message","dotenv","config","path","Chatbox","stallsByOccupant","Object","assign","entries","occupantsByStall","channel","myId","userHex","handleTextChange","scrollToBottom","text","data","test","messagesEnd","scrollIntoView","behavior","keyCode","ENDPOINT","payload","channel_name","name","userId","axios","post","value","float","clear","ref","el","type","placeholder","onChange","onKeyDown","RoomRight","Room","myStall","currentView","max_occupancy","max","restartParallax","currentState","stall","_occupantsByStall","_myStall","Math","floor","slice","container","document","getElementById","Parallax","selector","pointerEvents","Bathroom","onEnterWaiting","App","Pusher","process","cluster","encrypted","spy","auth","params","timeoutId","rooms","pusher_app_members","inLine","num_rooms","countMembers","spyOn","startInactivityCheck","userActivityDetected","handleEnterBathroom","handleEnterWaiting","handleEnterRoom","handleMouseMove","updateMemberCount","i","updateAppMembers","unsubscribe","num","location","roomId","roomsCopy","Array","from","channelName","split","pop","window","setTimeout","disconnect","clearTimeout","connection","alert","reload","roomEntered","currentRoom","length","hide","room","onMouseMove","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.739b8be8.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Button extends PureComponent {\n  render() {\n    const { onClick } = this.props;\n    return (\n      <button onClick={onClick}>{this.props.buttonText}</button>\n    );\n  }\n\n}\n\nexport default Button;","import React, { PureComponent } from 'react';\nimport Button from './Button';\n\nclass Hallway extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleEnterBathroomClick = this.handleEnterBathroomClick.bind(this);\n  }\n\n  // componentDidMount() {\n  //   console.log(`waiting room mounted`);\n  // }\n\n  handleEnterBathroomClick(e) {\n    this.props.onEnterBathroom(e);\n  }\n\n  render() {\n    return (\n      <div id=\"hallway\" className=\"view layer\" data-depth=\"0.2\">\n        <div className=\"content\">\n          <h2>Hallway</h2>\n          <div className=\"hotspots\">\n            <Button onClick={this.handleEnterBathroomClick} buttonText=\"Enter Bathroom\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Hallway;","import React, { Component } from 'react';\nimport Button from './Button';\n\nclass WaitingRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.pusher = props.pusher;\n    this.state = {\n      me: 0,\n      occupants: { count: 0 },\n    }\n    this.countOccupants = this.countOccupants.bind(this);\n    this.sortByEntryTime = this.sortByEntryTime.bind(this);\n    this.handleEnterRoomClick = this.handleEnterRoomClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.presenceChannel = this.pusher.subscribe(`presence-bathroom`);\n    this.presenceChannel.bind('pusher:subscription_succeeded', () => {\n      this.setState({ me: this.presenceChannel.members.me.id });\n      this.updateOccupants(this.presenceChannel.members);\n    });\n    this.presenceChannel.bind('pusher:member_added', () => {\n      this.updateOccupants(this.presenceChannel.members);\n    });\n    this.presenceChannel.bind('pusher:member_removed', () => {\n      this.updateOccupants(this.presenceChannel.members);\n      console.log(`WaitingRoom.js: someone left Room ${this.id}`);\n    });\n  }\n\n  // returns true count of occupants (excluding spies)\n  countOccupants(members) {\n    var count = 0;\n    // console.log(`countOccupants() members in line:`);\n    if (members.count > 0) {\n      members.each(function (member) {\n        if (!member.info.isSpy) { count++ }\n      });\n    }\n    return count\n  }\n\n  updateOccupants(members) {\n    console.log(`WaitingRoom.js updateOccupants: numOccupants ${members.count}`);\n    this.setState({\n      occupants: members,\n    }, () => this.props.onOccupancyChange(this.countOccupants(members), 'waiting'));\n  }\n\n\n  handleEnterRoomClick(e) {\n    this.props.onEnterRoom(e);\n  }\n\n  sortByEntryTime(occupants) {\n    let sorted = []\n    occupants.forEach((member) => {\n      sorted.push(member);\n    });\n    return sorted.sort((a,b) => {\n      if (parseInt(a.info.entry_time) < parseInt(b.info.entry_time)) { return -1 }\n      if (parseInt(a.info.entry_time) > parseInt(b.info.entry_time)) { return 1 }\n      return 0\n    });\n  }\n\n  render() {\n    let trueOccupants = [];\n    let trueOccupantsList = [];\n    if (this.state.occupants.count > 0) {\n      this.state.occupants.each((visitor) => {\n        if (!visitor.info.isSpy) {\n          trueOccupants.push(visitor);\n          if (visitor.id.toString() === this.state.me.toString()) {\n            trueOccupantsList.push(<li key={visitor.id.toString()}><strong>{visitor.id}</strong> ({visitor.info.entry_time})</li>);\n          }\n          else {\n            trueOccupantsList.push(<li key={visitor.id.toString()}>{visitor.id} ({visitor.info.entry_time})</li>);\n          }\n        }\n      });\n      trueOccupants = this.sortByEntryTime(trueOccupants);\n    }\n    \n    let ahead = trueOccupants.map((e) => { return e.id.toString() }).indexOf(this.state.me.toString());\n    let enterMessage = 'please wait...';\n    if (ahead > 0) {\n      enterMessage = `${ahead} ahead of you in line`;\n    }\n    else {\n      enterMessage = <Button onClick={this.handleEnterRoomClick} buttonText=\"Enter Stall\" />;\n    }\n\n    return (\n      <div id=\"waiting\" className=\"view layer\" data-depth=\"0.2\">\n        <div className=\"content\">\n          <div>\n            <h2>Waiting Room</h2>\n          </div>\n          <div>\n            In line: {this.countOccupants(this.state.occupants)}\n          </div>\n          <div>\n            <ul>{trueOccupantsList}</ul>\n            {enterMessage}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default WaitingRoom;","import React, { PureComponent } from 'react';\nimport Button from './Button';\n\nexport default class Stall extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  // componentDidMount() {\n  //   console.log(`waiting room mounted`);\n  // }\n\n  handleNavigationClick(target) {\n    this.props.handleNavigationClick(target);\n  }\n\n  render() {\n    const stallId = `stall-${this.props.direction}`;\n    return (     \n      <div id={stallId} className=\"view layer\" data-depth=\"0.2\">\n        <div className=\"content\">\n          <h2>Stall: {this.props.direction}</h2>\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\n\nexport default class Chatlist extends Component {\n  constructor(props) {\n    super(props);\n    this.stallMap = props.stallMap;\n    this.myHex = props.myHex;\n    this.getColorStyle = this.getColorStyle.bind(this);\n  }\n\n  getColorStyle(hex) {\n    return { color: hex }\n  }\n\n  render() {\n    const chats = this.props.chats.map(chat => \n      <div>\n        <div className=\"row show-grid\">\n          <div className=\"col-xs-12\">\n            \n            <div className=\"chatMessage\">\n              <div key={chat.id} className=\"box\">\n                <p>\n                  <strong style={this.getColorStyle(chat.userhex)}>{ chat.userhex === this.myHex ? 'you' : 'someone' }</strong>\n                </p>\n                <p>{chat.message}</p>\n              </div>\n            </div>\n            </div>\n          </div>\n        </div>\n      );\n\n\n    return (\n      <div id=\"chatlist\">\n        <ul>\n          {chats}\n        </ul>\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport Chatlist from './Chatlist';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config({ path: '.env' });\n\nexport default class Chatbox extends Component {\n  constructor(props) {\n    super(props);\n    this.stallsByOccupant = Object.assign({}, ...Object.entries(props.occupantsByStall).map(([a,b]) => ({ [b]: a })));\n    this.channel = props.channel;\n    this.myId = props.myId;\n    this.userHex = props.userHex;\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n    this.state = {\n      text: '',\n      chats: [],\n    }\n  }\n\n  componentDidMount() {\n    this.channel.bind('message', data => {\n      this.setState({ chats: [...this.state.chats, data], test: '' });\n    });\n    if (process.env.NODE_ENV === 'development') {\n      console.log('occupant id -> stall');\n      console.log(this.stallsByOccupant);\n    }\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  handleTextChange(e) {\n    if (e.keyCode === 13) { // hit enter on keyboard\n      const payload = {\n        channel_name: this.channel.name,\n        userId: this.myId,\n        userhex: this.userHex,\n        message: this.state.text,\n      };\n      var ENDPOINT;\n      if (process.env.NODE_ENV === 'development' ) {\n        ENDPOINT = 'http://localhost:5000/'\n      }\n      else {\n        ENDPOINT = 'https://virtual-bathroom.herokuapp.com/'\n      }\n      axios.post(ENDPOINT + 'message', payload);\n      this.setState({ text: '' });\n      this.scrollToBottom();\n    }\n    else {\n      this.setState({ text: e.target.value });\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"chatbox\" className=\"component-box\">\n        <h2>Chatbox</h2>\n        <div className=\"chatlist-container\">\n          <Chatlist chats={this.state.chats} myHex={this.userHex} stallMap={this.stallsByOccupant} />\n          <div style={{ float:\"left\", clear: \"both\" }}\n             ref={(el) => { this.messagesEnd = el; }}>\n          </div>\n        </div>\n        <input\n          type=\"text\"\n          value={this.state.text}\n          placeholder=\"chat here...\"\n          onChange={this.handleTextChange}\n          onKeyDown={this.handleTextChange}\n          />\n      </div>\n    );\n  }\n\n}\n","import React, { PureComponent } from 'react';\nimport Button from './Button';\nimport Chatbox from './Chatbox';\n\nexport default class RoomRight extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.channel = props.channel;\n    this.userHex = props.userHex;\n    this.myId = props.myId;\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  handleNavigationClick(target) {\n    this.props.handleNavigationClick(target);\n  }\n\n  render() {\n    return (\n      <div id=\"stall-right\" className=\"view layer\">\n        <div className=\"content\">\n          <h2>Stall: Right</h2>\n          <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n          <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n          <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" />\n          <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n          <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n          <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n          <Chatbox userHex={this.userHex} occupantsByStall={this.props.occupantsByStall} channel={this.channel} myId={this.myId} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport Stall from './Stall';\nimport Button from './Button';\n// import StallUp from './StallUp';\n// import StallLeft from './StallLeft';\nimport StallRight from './StallRight';\n// import StallDown from './StallDown';\n// import StallBack from './StallBack';\nimport Parallax from 'parallax-js';\n\nclass Room extends Component {\n  constructor(props) {\n    super(props);\n    this.pusher = props.pusher;\n    this.id = props.id;\n    this.presenceChannel = null;\n    this.me = null;\n    this.state = {\n      myStall: null,\n      occupantsByStall: {},\n      occupants: {count: 0},\n      userHex: '#ffffff',\n      currentView: 'stall-front',\n    };\n    this.max_occupancy = props.max;\n    this.updateOccupants = this.updateOccupants.bind(this);\n    this.countOccupants = this.countOccupants.bind(this);\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n    this.restartParallax = this.restartParallax.bind(this);\n  }\n\n  componentDidMount() {\n    this.presenceChannel = this.pusher.subscribe(`presence-room-${this.id}`);\n    this.presenceChannel.bind('pusher:subscription_succeeded', () => {\n      this.me = this.presenceChannel.members.me.id;\n      this.setState(currentState => {\n        let stall = 0;\n        let _occupantsByStall = {};\n        let _myStall = null;\n        var currentOccupants = this.presenceChannel.members.each((member) => {\n          if (!member.info.isSpy) {\n            _occupantsByStall[stall] = member.id;\n            if (member.id === this.me) {\n              _myStall = stall;\n            }\n            stall++;\n          }\n        });\n        return {\n          myStall: _myStall,\n          occupantsByStall: _occupantsByStall,\n          userHex: '#' + Math.floor(parseInt(this.presenceChannel.members.me.id)*16777215).toString(16).slice(-6)\n        }\n      });\n      this.updateOccupants(this.presenceChannel.members);\n    });\n    this.presenceChannel.bind('pusher:member_added', (member) => {\n      this.setState(currentState => {\n        let _occupantsByStall = Object.assign({}, currentState.occupantsByStall);\n        let stall = 0;\n        while (_occupantsByStall[stall] && stall < this.max_occupancy) {\n          stall++;\n        }\n        _occupantsByStall[stall] = member.id;\n        return {\n          occupantsByStall: _occupantsByStall,\n        }\n      });\n      this.updateOccupants(this.presenceChannel.members);\n    });\n    this.presenceChannel.bind('pusher:member_removed', (member) => {\n      this.setState(currentState => {\n        let _occupantsByStall = Object.assign({}, currentState.occupantsByStall);\n        let stall = 0;\n        while (_occupantsByStall[stall] !== member.id && stall < this.max_occupancy) {\n          stall++;\n        }\n        _occupantsByStall[stall] = null;\n        return {\n          occupantsByStall: _occupantsByStall,\n        }\n      });\n      this.updateOccupants(this.presenceChannel.members);\n      console.log(`Stall.js: ${member.id} left Stall ${this.id}`);\n    });\n  }\n\n  // returns true count of occupants (excluding spies)\n  countOccupants(members) {\n    var count = 0;\n    // console.log(`countOccupants() members in stall ${this.id}:`);\n    if (members.count > 0) {\n      members.each(function (member) {\n        if (!member.info.isSpy) { count++ }\n      });\n    }\n    return count\n  }\n\n  restartParallax() {\n    var container = document.getElementById('app');\n    var parallaxInstance = new Parallax(container, {\n      selector: '.layer',\n      pointerEvents: true,\n    });\n  }\n\n  updateOccupants(members) {\n    // console.log(`Stall.js updateOccupants: stall id ${this.id}, numOccupants ${members.count}`);\n    this.setState({\n      occupants: members,\n    }, () => this.props.onOccupancyChange(this.countOccupants(members), 'room', this.id));\n  }\n\n  handleNavigationClick(target) {\n    this.setState({ currentView: target });\n  }\n\n  render() {\n    var currentView = \n          <Stall direction=\"front\" handleNavigationClick={this.handleNavigationClick}>\n            <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n          </Stall>;\n    switch (this.state.currentView) {\n      case 'stall-up':\n        currentView = \n          <Stall direction=\"up\" handleNavigationClick={this.handleNavigationClick}>\n            <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n          </Stall>;\n        this.restartParallax();\n        break;\n      case 'stall-left':\n        currentView = \n          <Stall direction=\"left\" handleNavigationClick={this.handleNavigationClick}>\n            <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n          </Stall>;\n        this.restartParallax();\n        break;\n      case 'stall-right': // contains chatbox\n        currentView = <StallRight myId={this.me} occupantsByStall={this.state.occupantsByStall} channel={this.presenceChannel} userHex={this.state.userHex} handleNavigationClick={this.handleNavigationClick} />;\n        break;\n      case 'stall-down':\n        currentView = \n          <Stall direction=\"down\" handleNavigationClick={this.handleNavigationClick}>\n            <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n          </Stall>;\n        this.restartParallax();\n        break;\n      case 'stall-back':\n        currentView = \n          <Stall direction=\"back\" handleNavigationClick={this.handleNavigationClick}>\n            <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n          </Stall>;\n        this.restartParallax();\n        break;\n      case 'stall-front':\n      default:\n        currentView = \n          <Stall direction=\"front\" handleNavigationClick={this.handleNavigationClick}>\n            <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n            <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n          </Stall>;\n        this.restartParallax();\n        break;\n    }\n    return (\n      <div id=\"room\" className=\"view\">\n        <div className=\"hide\">\n          <h2>Room {this.id}: {this.countOccupants(this.state.occupants)} / {this.max_occupancy}</h2>\n        </div>\n        {currentView}\n      </div>\n    );\n  }\n\n}\n\nexport default Room;","import React, { Component } from 'react';\nimport Button from './Button';\n\nclass Bathroom extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentView: 'bathroom',\n    }\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  handleNavigationClick(target) {\n    if (target === 'waiting') {\n      this.props.onEnterWaiting();\n    }\n    else if (target === 'bathroom') {\n      this.setState({ currentView: 'bathroom' });\n    }\n  }\n\n  render() {\n    var currentView = null;\n    if (this.state.currentView === 'bathroom') {\n      currentView = \n        <div>\n          <Button onClick={() => this.handleNavigationClick('waiting')} buttonText=\"Wait for Stall\" />\n        </div>;\n    }\n\n    return (\n      <div id={this.state.currentView} className=\"view layer\" data-depth=\"0.2\">\n        <div className=\"content\">\n          <h2>{this.state.currentView}</h2>\n          {currentView}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Bathroom;","import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport dotenv from 'dotenv';\n\nimport Hallway from './Hallway'\nimport WaitingRoom from './WaitingRoom';\nimport Room from './Room';\nimport Bathroom from './Bathroom';\n\nimport Parallax from 'parallax-js';\nimport './css/normalize.css';\nimport './css/App.css';\n\ndotenv.config({ path: '.env' });\nconst LOGGING = process.env.NODE_ENV === 'development';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pusher = new Pusher(process.env.REACT_APP_PUSHER_APP_KEY, {\n      cluster: process.env.REACT_APP_PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    this.spy = new Pusher(process.env.REACT_APP_PUSHER_APP_KEY, {\n      encrypted: true,\n      cluster: process.env.REACT_APP_PUSHER_APP_CLUSTER,\n      auth: {\n        params: {\n          isSpy: true\n        }\n      }\n    });\n    this.me = null;\n    this.timeoutId = null;\n    this.state = {\n      currentView: { type: 'hallway', id: null },\n      rooms: [], // array of Room components\n      pusher_app_members: { count: 0 }, // pusher members object\n      inLine: 0,\n      message: '',\n    };\n    this.max_occupancy = 3; // ADJUST AS NEEDED\n    this.num_rooms = 2; // ADJUST AS NEEDED\n    this.countMembers = this.countMembers.bind(this);\n    this.spyOn = this.spyOn.bind(this);\n    this.startInactivityCheck = this.startInactivityCheck.bind(this);\n    this.userActivityDetected = this.userActivityDetected.bind(this);\n    this.handleEnterBathroom = this.handleEnterBathroom.bind(this);\n    this.handleEnterWaiting = this.handleEnterWaiting.bind(this);\n    this.handleEnterRoom = this.handleEnterRoom.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.restartParallax = this.restartParallax.bind(this);\n    this.updateMemberCount = this.updateMemberCount.bind(this);\n  }\n\n\n  componentDidMount() {\n    // parallax effect for background\n    this.restartParallax();\n\n    this.spyOn('presence-bathroom', 'waiting');\n    for (var i = 0; i < this.num_rooms; i++) {\n      this.spyOn(`presence-room-${i}`, 'room');\n    }\n    // main app channel\n    this.presenceChannel = this.pusher.subscribe('presence-app');\n    this.presenceChannel.bind('pusher:subscription_succeeded', () => {\n      this.me = this.presenceChannel.members.me.id;\n      this.updateAppMembers(this.presenceChannel.members);\n      if (LOGGING) { console.log(this.presenceChannel.members.me.id + ' subscribed to WaitingRoom'); }\n    });\n    this.presenceChannel.bind('pusher:member_added', () => {\n      this.updateAppMembers(this.presenceChannel.members);\n      if (LOGGING) {\n        console.log(`currentView: ${this.state.currentView}`);\n        console.log('someone joined Bathroom App');\n      }\n    });\n    // someone left App\n    this.presenceChannel.bind('pusher:member_removed', (member) => {\n      this.updateAppMembers(this.presenceChannel.members);\n      if (LOGGING) { console.log(`${member.id} left Bathroom App`); }\n    });\n  }\n\n  componentWillUnmount() {\n    this.pusher.unsubscribe('presence-app');\n  }\n\n  // returns a the number of members connected to channel\n  // excluding spies\n  countMembers(channel) {\n    if (LOGGING) { console.log(\"countMembers(): Current users in \" + channel.name + \":\"); }\n    var count = 0;\n    // var roomId = channel.name.split('-').pop();\n    channel.members.each(function (member) {\n      if (!member.info.isSpy) { console.log(\"user: \" + member.id); count++; }\n    });\n    return count\n  };\n\n  restartParallax() {\n    var container = document.getElementById('app');\n    var parallaxInstance = new Parallax(container, {\n      selector: '.layer',\n      pointerEvents: true,\n    });\n  }\n\n  // generic 'true' member count (excludes spies)\n  updateMemberCount(num, location, roomId) {\n    if (location === 'room') {\n      var roomsCopy = Array.from(this.state.rooms);\n      roomsCopy[roomId] = { id: roomId, occupants: num };\n      this.setState(currentState => {\n        return {\n          rooms: roomsCopy,\n        }\n      });\n    }\n    else if (location === 'waiting') {\n      this.setState(currentState => {\n        return { inLine: num }\n      });\n    }\n  }\n\n  // in app\n  updateAppMembers(members) {\n    this.setState({\n      pusher_app_members: members,\n    });\n  }\n\n  // spy on a channel\n  spyOn(channelName, location) {\n    var channel = this.spy.subscribe(channelName);\n    var roomId = null;\n    if (location === 'room') {\n      roomId = channelName.split('-').pop();\n    }\n    if (LOGGING) {\n      console.log(`trying to spy on ${channel.name}`);\n    }\n    channel.bind(\"pusher:subscription_succeeded\", () => {\n      if (LOGGING) { console.log(`spying on ${channelName}`); }\n      this.updateMemberCount(this.countMembers(channel), location, roomId);\n    });\n    channel.bind(\"pusher:member_added\", () => {\n      this.updateMemberCount(this.countMembers(channel), location, roomId);\n    });\n    channel.bind(\"pusher:member_removed\", () => {\n      if (LOGGING) { console.log(`someone left ${channelName}`); }\n      this.updateMemberCount(this.countMembers(channel), location, roomId);\n    });\n  };\n\n  startInactivityCheck() {\n    this.timeoutId = window.setTimeout(() => {\n      this.pusher.disconnect();\n    }, 5 * 60 * 1000); // SET TIMEOUT: time out after 5 minutes\n  }\n\n  userActivityDetected() {\n    if (this.timeoutId !== null) {\n      window.clearTimeout(this.timeoutId);\n    }\n    if (this.pusher.connection.state === 'disconnected') {\n      alert(`You've been ushered out of the bathroom for taking so long! Please line up again to re-enter the bathroom.`);\n      window.location.reload();\n    }\n    this.startInactivityCheck();\n  }\n\n  /* BEGIN: View transition functions \n    -----------------------------------\n  */\n  // hallway -> bathroom\n  handleEnterBathroom(e) {\n    this.setState(currentState => {\n      return {\n        currentView: { type: 'bathroom', id: null },\n      }\n    },\n    () => { this.restartParallax();\n    });\n  }\n\n  // bathroom -> wait for stall\n  handleEnterWaiting(e) {\n    this.setState(currentState => {\n      return {\n        currentView: { type: 'waiting', id: null },\n      }\n    },\n    () => { this.restartParallax(); });\n  }\n\n  // waiting -> stall\n  handleEnterRoom(e) {\n    var roomEntered = false;\n    this.pusher.unsubscribe('presence-bathroom');\n\n    for (var i = 0; !roomEntered && i < this.state.rooms.length; i++) {\n      var currentRoom = {...this.state.rooms[i]};\n      let roomId = i;\n      if (currentRoom.occupants < this.max_occupancy) {\n        this.updateMemberCount(currentRoom.occupants+1, 'room', i);\n        this.setState(currentState => {\n          return {\n            currentView: { type: 'room', id: roomId },\n          };\n        }, () => { this.restartParallax() });\n        roomEntered = true;\n      }\n      else {\n        console.log(`Room ${i} full`);\n      }\n    }\n\n    if (!roomEntered) {\n      alert('no vacant rooms available!');\n    }\n  }\n\n  handleMouseMove() {\n    this.userActivityDetected();\n  }\n\n  render() {\n    var hide = null;\n    // if (process.env.NODE_ENV === 'production') {\n    //   hide = 'hide';\n    // }\n    if (LOGGING) { console.log('render() rooms:') }\n    if (LOGGING) { console.log(this.state.rooms); hide = null }\n    console.log(`running in ${process.env.NODE_ENV} mode`);\n    const rooms = this.state.rooms.map((room) =>\n      <li key={room.id.toString()}><strong>Room {room.id}:</strong> {room.occupants}/{this.max_occupancy}</li>\n    );\n\n    // let visitorsList = [];\n    // if (this.state.pusher_app_members.count > 0) {\n    //   this.state.pusher_app_members.each((visitor) => \n    //     visitorsList.push(<li key={visitor.id.toString()}>{visitor.id}</li>)\n    //   );\n    // }\n    // default view is hallway\n    let currentView = <Hallway onEnterBathroom={this.handleEnterBathroom} />\n    if (this.state.currentView.type === 'bathroom') {\n      currentView = <Bathroom onEnterWaiting={this.handleEnterWaiting} />\n    }\n    else if (this.state.currentView.type === 'waiting') { \n      currentView = <WaitingRoom onEnterRoom={this.handleEnterRoom} pusher={this.pusher} onOccupancyChange={this.updateMemberCount} />; \n    }\n    if (this.state.currentView.type === 'room') {\n      currentView = <Room id={this.state.currentView.id} pusher={this.pusher} max={this.max_occupancy} onOccupancyChange={this.updateMemberCount} />;\n    }\n    return (\n      <div id=\"app\" onMouseMove={this.handleMouseMove}>\n        <div id=\"debug-console\" className={hide}>\n          <div>\n            THE APP IS RUNNING IN <strong>{process.env.NODE_ENV}</strong> MODE<br/>\n            this box is for development purposes only\n          </div>\n          <div>\n            <div>Number of Rooms: {this.num_rooms}</div>\n            <div><strong>Current Users:</strong> {this.state.pusher_app_members.count}</div>\n            <div><strong>In line:</strong> {this.state.inLine}</div>\n          </div>\n          <div>\n            <strong>Rooms:</strong>\n            {rooms}\n          </div>\n        </div>\n        {currentView}\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}