{"version":3,"sources":["Button.js","Hallway.js","WaitingRoom.js","StallFront.js","StallUp.js","StallLeft.js","Chatlist.js","Chatbox.js","StallRight.js","StallDown.js","StallBack.js","Room.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","this","props","buttonText","PureComponent","Hallway","handleEnterBathroomClick","bind","e","onEnterBathroom","id","className","WaitingRoom","pusher","state","me","occupants","count","countOccupants","handleEnterRoomClick","presenceChannel","subscribe","setState","members","updateOccupants","console","log","each","member","info","isSpy","onOccupancyChange","onEnterRoom","trueOccupants","trueOccupantsList","visitor","push","key","toString","ahead","length","indexOf","enterMessage","Component","StallFront","handleNavigationClick","target","RoomUp","StallLeft","Chatlist","getColorStyle","hex","color","chats","map","chat","style","userhex","message","dotenv","config","path","Chatbox","channel","userHex","handleTextChange","scrollToBottom","text","data","test","messagesEnd","scrollIntoView","behavior","keyCode","ENDPOINT","payload","channel_name","name","axios","post","value","float","clear","ref","el","type","placeholder","onChange","onKeyDown","RoomRight","StallDown","RoomBack","Stall","currentView","max_occupancy","max","currentState","Math","floor","parseInt","slice","App","Pusher","process","cluster","encrypted","spy","auth","params","rooms","pusher_app_members","inLine","num_rooms","countMembers","spyOn","handleEnterBathroom","handleEnterRoom","updateMemberCount","i","updateAppMembers","unsubscribe","num","location","roomId","roomsCopy","Array","from","channelName","split","pop","roomEntered","currentRoom","alert","hide","room","Room","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"yVAYeA,E,uKATH,IACAC,EAAYC,KAAKC,MAAjBF,QACR,OACE,4BAAQA,QAASA,GAAUC,KAAKC,MAAMC,gB,GAJvBC,iBC4BNC,E,kDA1Bb,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IACDI,yBAA2B,EAAKA,yBAAyBC,KAA9B,gBAFf,E,qEASMC,GACvBP,KAAKC,MAAMO,gBAAgBD,K,+BAI3B,OACE,yBAAKE,GAAG,UAAUC,UAAU,QAC1B,uCACA,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAQX,QAASC,KAAKK,yBAA0BH,WAAW,yB,GAnB/CC,iBC8FPQ,E,kDA7Fb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,OAASX,EAAMW,OACpB,EAAKC,MAAQ,CACXC,GAAI,EACJC,UAAW,CAAEC,MAAO,IAEtB,EAAKC,eAAiB,EAAKA,eAAeX,KAApB,gBACtB,EAAKY,qBAAuB,EAAKA,qBAAqBZ,KAA1B,gBARX,E,gEAWE,IAAD,OAClBN,KAAKmB,gBAAkBnB,KAAKY,OAAOQ,UAAZ,qBACvBpB,KAAKmB,gBAAgBb,KAAK,iCAAiC,WACzD,EAAKe,SAAS,CAAEP,GAAI,EAAKK,gBAAgBG,QAAQR,GAAGL,KACpD,EAAKc,gBAAgB,EAAKJ,gBAAgBG,YAE5CtB,KAAKmB,gBAAgBb,KAAK,uBAAuB,WAC/C,EAAKiB,gBAAgB,EAAKJ,gBAAgBG,YAE5CtB,KAAKmB,gBAAgBb,KAAK,yBAAyB,WACjD,EAAKiB,gBAAgB,EAAKJ,gBAAgBG,SAC1CE,QAAQC,IAAR,4CAAiD,EAAKhB,U,qCAK3Ca,GACb,IAAIN,EAAQ,EAOZ,OALIM,EAAQN,MAAQ,GAClBM,EAAQI,MAAK,SAAUC,GAChBA,EAAOC,KAAKC,OAASb,OAGvBA,I,sCAGOM,GAAU,IAAD,OACvBE,QAAQC,IAAR,uDAA4DH,EAAQN,QACpEhB,KAAKqB,SAAS,CACZN,UAAWO,IACV,kBAAM,EAAKrB,MAAM6B,kBAAkB,EAAKb,eAAeK,GAAU,gB,2CAIjDf,GACnBP,KAAKC,MAAM8B,YAAYxB,K,+BAGf,IAAD,OACHyB,EAAgB,GAChBC,EAAoB,GACpBjC,KAAKa,MAAME,UAAUC,MAAQ,GAC/BhB,KAAKa,MAAME,UAAUW,MAAK,SAACQ,GACpBA,EAAQN,KAAKC,QAChBG,EAAcG,KAAKD,EAAQzB,IACvByB,EAAQzB,KAAO,EAAKI,MAAMC,GAC5BmB,EAAkBE,KAAK,wBAAIC,IAAKF,EAAQzB,GAAG4B,YAAY,gCAASH,EAAQzB,MAGxEwB,EAAkBE,KAAK,wBAAIC,IAAKF,EAAQzB,GAAG4B,YAAaH,EAAQzB,SAKxE,IAAI6B,EAAQN,EAAcO,OAASP,EAAcQ,QAAQxC,KAAKa,MAAMC,GAAGuB,YAAc,EACjFI,EAAe,iBAQnB,OANEA,EADEH,EAAQ,EACE,UAAMA,EAAN,yBAGG,kBAAC,EAAD,CAAQvC,QAASC,KAAKkB,qBAAsBhB,WAAW,gBAItE,yBAAKO,GAAG,UAAUC,UAAU,QAC1B,6BACE,6CAEF,yCACYV,KAAKiB,eAAejB,KAAKa,MAAME,YAE3C,6BACE,4BAAKkB,GACJQ,Q,GAtFeC,aCALC,E,kDACnB,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IACD2C,sBAAwB,EAAKA,sBAAsBtC,KAA3B,gBAFZ,E,kEASGuC,GACpB7C,KAAKC,MAAM2C,sBAAsBC,K,+BAGzB,IAAD,OACP,OACE,yBAAKpC,GAAG,cAAcC,UAAU,QAC9B,4CACA,kBAAC,EAAD,CAAQX,QAAS,kBAAM,EAAK6C,sBAAsB,aAAa1C,WAAW,OAAO,6BACjF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAC5E,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,6BACrF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,kC,GAtBrDC,iBCAnB2C,E,kDACnB,WAAY7C,GAAQ,IAAD,8BACjB,cAAMA,IACD2C,sBAAwB,EAAKA,sBAAsBtC,KAA3B,gBAFZ,E,kEASGuC,GACpB7C,KAAKC,MAAM2C,sBAAsBC,K,+BAGzB,IAAD,OACP,OACE,yBAAKpC,GAAG,WAAWC,UAAU,QAC3B,yCACA,kBAAC,EAAD,CAAQX,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,aAAa1C,WAAW,OAAO,6BACjF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAC5E,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,6BACrF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,kC,GAvBzDC,iBCAf4C,E,kDACnB,WAAY9C,GAAQ,IAAD,8BACjB,cAAMA,IACD2C,sBAAwB,EAAKA,sBAAsBtC,KAA3B,gBAFZ,E,kEASGuC,GACpB7C,KAAKC,MAAM2C,sBAAsBC,K,+BAGzB,IAAD,OACP,OACE,yBAAKpC,GAAG,aAAaC,UAAU,QAC7B,2CACA,kBAAC,EAAD,CAAQX,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,aAAa1C,WAAW,OAAO,6BACjF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAC5E,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,6BACrF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,kC,GAvBtDC,iB,QCDlB6C,E,kDACnB,WAAY/C,GAAQ,IAAD,8BACjB,cAAMA,IACDgD,cAAgB,EAAKA,cAAc3C,KAAnB,gBAFJ,E,0DAKL4C,GACZ,MAAO,CAAEC,MAAOD,K,+BAGR,IAAD,OACDE,EAAQpD,KAAKC,MAAMmD,MAAMC,KAAI,SAAAC,GAAI,OACrC,6BACE,yBAAK5C,UAAU,iBACb,yBAAKA,UAAU,aAEb,yBAAKA,UAAU,eACb,yBAAK0B,IAAKkB,EAAK7C,GAAIC,UAAU,OAC3B,2BACE,4BAAQ6C,MAAO,EAAKN,cAAcK,EAAKE,UAAvC,YAEF,2BAAIF,EAAKG,iBASrB,OACE,yBAAKhD,GAAG,YACN,4BACG2C,Q,GAjC2BV,a,iBCGtCgB,IAAOC,OAAO,CAAEC,KAAM,S,IAEDC,E,kDACnB,WAAY5D,GAAQ,IAAD,8BACjB,cAAMA,IACD6D,QAAU7D,EAAM6D,QACrB,EAAKC,QAAU9D,EAAM8D,QACrB,EAAKC,iBAAmB,EAAKA,iBAAiB1D,KAAtB,gBACxB,EAAK2D,eAAiB,EAAKA,eAAe3D,KAApB,gBACtB,EAAKO,MAAQ,CACXqD,KAAM,GACNd,MAAO,IARQ,E,gEAYE,IAAD,OAClBpD,KAAK8D,QAAQxD,KAAK,WAAW,SAAA6D,GAC3B,EAAK9C,SAAS,CAAE+B,MAAM,GAAD,mBAAM,EAAKvC,MAAMuC,OAAjB,CAAwBe,IAAOC,KAAM,U,2CAK5DpE,KAAKiE,mB,uCAILjE,KAAKqE,YAAYC,eAAe,CAAEC,SAAU,a,uCAG7BhE,GACf,GAAkB,KAAdA,EAAEiE,QAAgB,CACpB,IAMIC,EANEC,EAAU,CACdC,aAAc3E,KAAK8D,QAAQc,KAC3BpB,QAASxD,KAAK+D,QACdN,QAASzD,KAAKa,MAAMqD,MAQpBO,EAAW,0CAEbI,IAAMC,KAAKL,EAAW,UAAWC,GACjC1E,KAAKqB,SAAS,CAAE6C,KAAM,KACtBlE,KAAKiE,sBAGLjE,KAAKqB,SAAS,CAAE6C,KAAM3D,EAAEsC,OAAOkC,U,+BAIzB,IAAD,OACP,OACE,yBAAKtE,GAAG,UAAUC,UAAU,iBAC1B,uCACA,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAU0C,MAAOpD,KAAKa,MAAMuC,QAC5B,yBAAKG,MAAO,CAAEyB,MAAM,OAAQC,MAAO,QAChCC,IAAK,SAACC,GAAS,EAAKd,YAAcc,MAGvC,2BACEC,KAAK,OACLL,MAAO/E,KAAKa,MAAMqD,KAClBmB,YAAY,eACZC,SAAUtF,KAAKgE,iBACfuB,UAAWvF,KAAKgE,wB,GAlEWtB,aCHhB8C,E,kDACnB,WAAYvF,GAAQ,IAAD,8BACjB,cAAMA,IACD6D,QAAU7D,EAAM6D,QACrB,EAAKC,QAAU9D,EAAM8D,QACrB,EAAKnB,sBAAwB,EAAKA,sBAAsBtC,KAA3B,gBAJZ,E,kEAOGuC,GACpB7C,KAAKC,MAAM2C,sBAAsBC,K,+BAGzB,IAAD,OACP,OACE,yBAAKpC,GAAG,cAAcC,UAAU,QAC9B,4CACA,kBAAC,EAAD,CAAQX,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,aAAa1C,WAAW,OAAO,6BACjF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAC5E,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,6BACrF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,6BACrF,kBAAC,EAAD,CAAS6D,QAAS/D,KAAK+D,QAASD,QAAS9D,KAAK8D,e,GAtBf3D,iBCDlBsF,E,kDACnB,WAAYxF,GAAQ,IAAD,8BACjB,cAAMA,IACD2C,sBAAwB,EAAKA,sBAAsBtC,KAA3B,gBAFZ,E,kEASGuC,GACpB7C,KAAKC,MAAM2C,sBAAsBC,K,+BAGzB,IAAD,OACP,OACE,yBAAKpC,GAAG,aAAaC,UAAU,QAC7B,2CACA,kBAAC,EAAD,CAAQX,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,aAAa1C,WAAW,OAAO,6BACjF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAC5E,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,6BACrF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,kC,GAvBtDC,iBCAlBuF,E,kDACnB,WAAYzF,GAAQ,IAAD,8BACjB,cAAMA,IACD2C,sBAAwB,EAAKA,sBAAsBtC,KAA3B,gBAFZ,E,kEASGuC,GACpB7C,KAAKC,MAAM2C,sBAAsBC,K,+BAGzB,IAAD,OACP,OACE,yBAAKpC,GAAG,cAAcC,UAAU,QAC9B,2CACA,kBAAC,EAAD,CAAQX,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,aAAa1C,WAAW,OAAO,6BACjF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAC5E,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,gBAAgB1C,WAAW,UAAU,6BACvF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,6BACrF,kBAAC,EAAD,CAAQH,QAAS,kBAAM,EAAK6C,sBAAsB,eAAe1C,WAAW,SAAS,kC,GAvBvDC,iBCwGvBwF,E,kDAlGb,WAAY1F,GAAQ,IAAD,8BACjB,cAAMA,IACDW,OAASX,EAAMW,OACpB,EAAKH,GAAKR,EAAMQ,GAChB,EAAKU,gBAAkB,KACvB,EAAKL,GAAK,KACV,EAAKD,MAAQ,CACXE,UAAW,CAACC,MAAO,GACnB+C,QAAS,UACT6B,YAAa,eAEf,EAAKC,cAAgB5F,EAAM6F,IAC3B,EAAKvE,gBAAkB,EAAKA,gBAAgBjB,KAArB,gBACvB,EAAKW,eAAiB,EAAKA,eAAeX,KAApB,gBACtB,EAAKsC,sBAAwB,EAAKA,sBAAsBtC,KAA3B,gBAdZ,E,gEAiBE,IAAD,OAClBN,KAAKmB,gBAAkBnB,KAAKY,OAAOQ,UAAZ,wBAAuCpB,KAAKS,KACnET,KAAKmB,gBAAgBb,KAAK,iCAAiC,WACzD,EAAKQ,GAAK,EAAKK,gBAAgBG,QAAQR,GAAGL,GAC1C,EAAKY,UAAS,SAAA0E,GACZ,MAAO,CACLhC,QAAS,IAAMiC,KAAKC,MAAmD,SAA7CC,SAAS,EAAK/E,gBAAgBG,QAAQR,GAAGL,KAAc4B,SAAS,IAAI8D,OAAO,OAGzG,EAAK5E,gBAAgB,EAAKJ,gBAAgBG,YAE5CtB,KAAKmB,gBAAgBb,KAAK,uBAAuB,WAC/C,EAAKiB,gBAAgB,EAAKJ,gBAAgBG,YAE5CtB,KAAKmB,gBAAgBb,KAAK,yBAAyB,WACjD,EAAKiB,gBAAgB,EAAKJ,gBAAgBG,SAC1CE,QAAQC,IAAR,uCAA4C,EAAKhB,U,qCAKtCa,GACb,IAAIN,EAAQ,EAOZ,OALIM,EAAQN,MAAQ,GAClBM,EAAQI,MAAK,SAAUC,GAChBA,EAAOC,KAAKC,OAASb,OAGvBA,I,sCAGOM,GAAU,IAAD,OAEvBtB,KAAKqB,SAAS,CACZN,UAAWO,IACV,kBAAM,EAAKrB,MAAM6B,kBAAkB,EAAKb,eAAeK,GAAU,OAAQ,EAAKb,S,4CAG7DoC,GACpB7C,KAAKqB,SAAS,CAAEuE,YAAa/C,M,+BAKpB7C,KAAKa,MAAMkD,QADpB,IAGI6B,EAAc,kBAAC,EAAD,CAAYhD,sBAAuB5C,KAAK4C,wBAC1D,OAAQ5C,KAAKa,MAAM+E,aACjB,IAAK,WACHA,EAAc,kBAAC,EAAD,CAAShD,sBAAuB5C,KAAK4C,wBACnD,MACF,IAAK,aACHgD,EAAc,kBAAC,EAAD,CAAWhD,sBAAuB5C,KAAK4C,wBACrD,MACF,IAAK,cACHgD,EAAc,kBAAC,EAAD,CAAY9B,QAAS9D,KAAKmB,gBAAiB4C,QAAS/D,KAAKa,MAAMkD,QAASnB,sBAAuB5C,KAAK4C,wBAClH,MACF,IAAK,aACHgD,EAAc,kBAAC,EAAD,CAAWhD,sBAAuB5C,KAAK4C,wBACrD,MACF,IAAK,aACHgD,EAAc,kBAAC,EAAD,CAAWhD,sBAAuB5C,KAAK4C,wBACrD,MACF,IAAK,cACL,QACEgD,EAAc,kBAAC,EAAD,CAAYhD,sBAAuB5C,KAAK4C,wBAG1D,OACE,yBAAKnC,GAAG,QACN,6BACE,oCAAUT,KAAKS,GAAf,KAAqBT,KAAKiB,eAAejB,KAAKa,MAAME,WAApD,MAAmEf,KAAK6F,gBAEzED,O,GA5FWlD,a,YCGpBgB,IAAOC,OAAO,CAAEC,KAAM,SACtB,IAuNewC,E,kDApNb,WAAYnG,GAAQ,IAAD,8BACjB,cAAMA,IACDW,OAAS,IAAIyF,IAAOC,uBAAsC,CAC7DC,QAASD,MACTE,WAAW,IAEb,EAAKC,IAAM,IAAIJ,IAAOC,uBAAsC,CAC1DE,WAAW,EACXD,QAASD,MACTI,KAAM,CACJC,OAAQ,CACN9E,OAAO,MAIb,EAAKf,GAAK,KACV,EAAKD,MAAQ,CACX+E,YAAa,CAAER,KAAM,UAAW3E,GAAI,MACpCmG,MAAO,GACPC,mBAAoB,CAAE7F,MAAO,GAC7B8F,OAAQ,EACRrD,QAAS,IAEX,EAAKoC,cAAgB,EACrB,EAAKkB,UAAY,EACjB,EAAKC,aAAe,EAAKA,aAAa1G,KAAlB,gBACpB,EAAK2G,MAAQ,EAAKA,MAAM3G,KAAX,gBACb,EAAK4G,oBAAsB,EAAKA,oBAAoB5G,KAAzB,gBAC3B,EAAK6G,gBAAkB,EAAKA,gBAAgB7G,KAArB,gBACvB,EAAK8G,kBAAoB,EAAKA,kBAAkB9G,KAAvB,gBA7BR,E,gEAiCE,IAAD,OAClBN,KAAKiH,MAAM,oBAAqB,WAChC,IAAK,IAAII,EAAI,EAAGA,EAAIrH,KAAK+G,UAAWM,IAClCrH,KAAKiH,MAAL,wBAA4BI,GAAK,QAGnCrH,KAAKmB,gBAAkBnB,KAAKY,OAAOQ,UAAU,gBAC7CpB,KAAKmB,gBAAgBb,KAAK,iCAAiC,WACzD,EAAKQ,GAAK,EAAKK,gBAAgBG,QAAQR,GAAGL,GAC1C,EAAK6G,iBAAiB,EAAKnG,gBAAgBG,YAG7CtB,KAAKmB,gBAAgBb,KAAK,uBAAuB,WAC/C,EAAKgH,iBAAiB,EAAKnG,gBAAgBG,YAO7CtB,KAAKmB,gBAAgBb,KAAK,yBAAyB,SAACqB,GAClD,EAAK2F,iBAAiB,EAAKnG,gBAAgBG,c,6CAM7CtB,KAAKY,OAAO2G,YAAY,kB,mCAKbzD,GAEX,IAAI9C,EAAQ,EAKZ,OAHA8C,EAAQxC,QAAQI,MAAK,SAAUC,GACxBA,EAAOC,KAAKC,QAASL,QAAQC,IAAI,SAAWE,EAAOlB,IAAKO,QAExDA,I,wCAISwG,EAAKC,EAAUC,GAC/B,GAAiB,SAAbD,EAAqB,CACvB,IAAIE,EAAYC,MAAMC,KAAK7H,KAAKa,MAAM+F,OACtCe,EAAUD,GAAU,CAAEjH,GAAIiH,EAAQ3G,UAAWyG,GAC7CxH,KAAKqB,UAAS,SAAA0E,GACZ,MAAO,CACLa,MAAOe,UAIS,YAAbF,GACPzH,KAAKqB,UAAS,SAAA0E,GACZ,MAAO,CAAEe,OAAQU,Q,uCAMNlG,GACftB,KAAKqB,SAAS,CACZwF,mBAAoBvF,M,4BAKlBwG,EAAaL,GAAW,IAAD,OACvB3D,EAAU9D,KAAKyG,IAAIrF,UAAU0G,GAC7BJ,EAAS,KACI,SAAbD,IACFC,EAASI,EAAYC,MAAM,KAAKC,OAKlClE,EAAQxD,KAAK,iCAAiC,WAE5C,EAAK8G,kBAAkB,EAAKJ,aAAalD,GAAU2D,EAAUC,MAE/D5D,EAAQxD,KAAK,uBAAuB,WAClC,EAAK8G,kBAAkB,EAAKJ,aAAalD,GAAU2D,EAAUC,MAE/D5D,EAAQxD,KAAK,yBAAyB,WAEpC,EAAK8G,kBAAkB,EAAKJ,aAAalD,GAAU2D,EAAUC,Q,0CAQ7CnH,GAClBP,KAAKqB,UAAS,SAAA0E,GACZ,MAAO,CACLH,YAAa,CAAER,KAAM,UAAW3E,GAAI,Y,sCAM1BF,GAAI,IAAD,OACb0H,GAAc,EAClBjI,KAAKY,OAAO2G,YAAY,qBAExB,IAJiB,iBAKXW,EAAW,eAAO,EAAKrH,MAAM+F,MAAMS,IACvC,IAAIK,EAASL,EACTa,EAAYnH,UAAY,EAAK8E,eAC/B,EAAKuB,kBAAkBc,EAAYnH,UAAU,EAAG,OAAQsG,GACxD,EAAKhG,UAAS,SAAA0E,GACZ,MAAO,CACLH,YAAa,CAAER,KAAM,OAAQ3E,GAAIiH,OAGrCO,GAAc,GAGdzG,QAAQC,IAAR,eAAoB4F,EAApB,WAbKA,EAAI,GAAIY,GAAeZ,EAAIrH,KAAKa,MAAM+F,MAAMrE,OAAQ8E,IAAK,CAAC,IAC7Da,EAD4D,IAiB7DD,GACHE,MAAM,gC,+BAIA,IAAD,OACHC,EAAO,KAMX5G,QAAQC,IAAR,qBAA0B6E,aAA1B,UACA,IAAMM,EAAQ5G,KAAKa,MAAM+F,MAAMvD,KAAI,SAACgF,GAAD,OACjC,wBAAIjG,IAAKiG,EAAK5H,GAAG4B,YAAY,wCAAcgG,EAAK5H,GAAnB,KAA7B,IAA+D4H,EAAKtH,UAApE,IAAgF,EAAK8E,kBAUnFD,EAAc,kBAAC,EAAD,CAASpF,gBAAiBR,KAAKkH,sBAOjD,MANoC,YAAhClH,KAAKa,MAAM+E,YAAYR,OACzBQ,EAAc,kBAAC,EAAD,CAAa7D,YAAa/B,KAAKmH,gBAAiBvG,OAAQZ,KAAKY,OAAQkB,kBAAmB9B,KAAKoH,qBAEzE,SAAhCpH,KAAKa,MAAM+E,YAAYR,OACzBQ,EAAc,kBAAC0C,EAAD,CAAM7H,GAAIT,KAAKa,MAAM+E,YAAYnF,GAAIG,OAAQZ,KAAKY,OAAQkF,IAAK9F,KAAK6F,cAAe/D,kBAAmB9B,KAAKoH,qBAGzH,yBAAK3G,GAAG,OACN,yBAAKA,GAAG,gBAAgBC,UAAW0H,GACjC,sDACwB,gCAAS9B,cADjC,QACoE,6BADpE,6CAIA,6BACE,iDAAuBtG,KAAK+G,WAC5B,6BAAK,kDAAL,IAAsC/G,KAAKa,MAAMgG,mBAAmB7F,OACpE,6BAAK,4CAAL,IAAgChB,KAAKa,MAAMiG,SAE7C,6BACE,0CACCF,IAGJhB,O,GA9MSlD,aCFE6F,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/H,QAAQ+H,MAAMA,EAAM9F,c","file":"static/js/main.c8ca1122.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Button extends PureComponent {\n  render() {\n    const { onClick } = this.props;\n    return (\n      <button onClick={onClick}>{this.props.buttonText}</button>\n    );\n  }\n\n}\n\nexport default Button;","import React, { PureComponent } from 'react';\nimport Button from './Button';\n\nclass Hallway extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleEnterBathroomClick = this.handleEnterBathroomClick.bind(this);\n  }\n\n  // componentDidMount() {\n  //   console.log(`waiting room mounted`);\n  // }\n\n  handleEnterBathroomClick(e) {\n    this.props.onEnterBathroom(e);\n  }\n\n  render() {\n    return (\n      <div id=\"hallway\" className=\"view\">\n        <h2>Hallway</h2>\n        <div className=\"hotspots\">\n          <Button onClick={this.handleEnterBathroomClick} buttonText=\"Enter Bathroom\" />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Hallway;","import React, { Component } from 'react';\nimport Button from './Button';\n\nclass WaitingRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.pusher = props.pusher;\n    this.state = {\n      me: 0,\n      occupants: { count: 0 },\n    }\n    this.countOccupants = this.countOccupants.bind(this);\n    this.handleEnterRoomClick = this.handleEnterRoomClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.presenceChannel = this.pusher.subscribe(`presence-bathroom`);\n    this.presenceChannel.bind('pusher:subscription_succeeded', () => {\n      this.setState({ me: this.presenceChannel.members.me.id });\n      this.updateOccupants(this.presenceChannel.members);\n    });\n    this.presenceChannel.bind('pusher:member_added', () => {\n      this.updateOccupants(this.presenceChannel.members);\n    });\n    this.presenceChannel.bind('pusher:member_removed', () => {\n      this.updateOccupants(this.presenceChannel.members);\n      console.log(`WaitingRoom.js: someone left Room ${this.id}`);\n    });\n  }\n\n  // returns true count of occupants (excluding spies)\n  countOccupants(members) {\n    var count = 0;\n    // console.log(`countOccupants() members in line:`);\n    if (members.count > 0) {\n      members.each(function (member) {\n        if (!member.info.isSpy) { count++ }\n      });\n    }\n    return count\n  }\n\n  updateOccupants(members) {\n    console.log(`WaitingRoom.js updateOccupants: numOccupants ${members.count}`);\n    this.setState({\n      occupants: members,\n    }, () => this.props.onOccupancyChange(this.countOccupants(members), 'waiting'));\n  }\n\n\n  handleEnterRoomClick(e) {\n    this.props.onEnterRoom(e);\n  }\n\n  render() {\n    let trueOccupants = [];\n    let trueOccupantsList = [];\n    if (this.state.occupants.count > 0) {\n      this.state.occupants.each((visitor) => {\n        if (!visitor.info.isSpy) {\n          trueOccupants.push(visitor.id);\n          if (visitor.id === this.state.me) {\n            trueOccupantsList.push(<li key={visitor.id.toString()}><strong>{visitor.id}</strong></li>);\n          }\n          else {\n            trueOccupantsList.push(<li key={visitor.id.toString()}>{visitor.id}</li>);\n          }\n        }\n      });\n    }\n    let ahead = trueOccupants.length - trueOccupants.indexOf(this.state.me.toString()) - 1;\n    let enterMessage = 'please wait...';\n    if (ahead > 0) {\n      enterMessage = `${ahead} ahead of you in line`;\n    }\n    else {\n      enterMessage = <Button onClick={this.handleEnterRoomClick} buttonText=\"Enter Stall\" />;\n    }\n\n    return (\n      <div id=\"waiting\" className=\"view\">\n        <div>\n          <h2>Waiting Room</h2>\n        </div>\n        <div>\n          In line: {this.countOccupants(this.state.occupants)}\n        </div>\n        <div>\n          <ul>{trueOccupantsList}</ul>\n          {enterMessage}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default WaitingRoom;","import React, { PureComponent } from 'react';\nimport Button from './Button';\n\nexport default class StallFront extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  // componentDidMount() {\n  //   console.log(`waiting room mounted`);\n  // }\n\n  handleNavigationClick(target) {\n    this.props.handleNavigationClick(target);\n  }\n\n  render() {\n    return (\n      <div id=\"stall-front\" className=\"view\">\n        <h2>Stall: Front</h2>\n        <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" />\n        <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n      </div>\n    );\n  }\n\n}\n","import React, { PureComponent } from 'react';\nimport Button from './Button';\n\nexport default class RoomUp extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  // componentDidMount() {\n  //   console.log(`waiting stall mounted`);\n  // }\n\n  handleNavigationClick(target) {\n    this.props.handleNavigationClick(target);\n  }\n\n  render() {\n    return (\n      <div id=\"stall-up\" className=\"view\">\n        <h2>Stall: Up</h2>\n        <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" />\n        <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n      </div>\n    );\n  }\n\n}\n","import React, { PureComponent } from 'react';\nimport Button from './Button';\n\nexport default class StallLeft extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  // componentDidMount() {\n  //   console.log(`waiting room mounted`);\n  // }\n\n  handleNavigationClick(target) {\n    this.props.handleNavigationClick(target);\n  }\n\n  render() {\n    return (\n      <div id=\"stall-left\" className=\"view\">\n        <h2>Stall: Left</h2>\n        <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" />\n        <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\n\nexport default class Chatlist extends Component {\n  constructor(props) {\n    super(props);\n    this.getColorStyle = this.getColorStyle.bind(this);\n  }\n\n  getColorStyle(hex) {\n    return { color: hex }\n  }\n\n  render() {\n    const chats = this.props.chats.map(chat => \n      <div>\n        <div className=\"row show-grid\">\n          <div className=\"col-xs-12\">\n            \n            <div className=\"chatMessage\">\n              <div key={chat.id} className=\"box\">\n                <p>\n                  <strong style={this.getColorStyle(chat.userhex)}>someone</strong>\n                </p>\n                <p>{chat.message}</p>\n              </div>\n            </div>\n            </div>\n          </div>\n        </div>\n      );\n\n\n    return (\n      <div id=\"chatlist\">\n        <ul>\n          {chats}\n        </ul>\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport Chatlist from './Chatlist';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\n\ndotenv.config({ path: '.env' });\n\nexport default class Chatbox extends Component {\n  constructor(props) {\n    super(props);\n    this.channel = props.channel;\n    this.userHex = props.userHex;\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.scrollToBottom = this.scrollToBottom.bind(this);\n    this.state = {\n      text: '',\n      chats: [],\n    }\n  }\n\n  componentDidMount() {\n    this.channel.bind('message', data => {\n      this.setState({ chats: [...this.state.chats, data], test: '' });\n    });\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  handleTextChange(e) {\n    if (e.keyCode === 13) { // hit enter on keyboard\n      const payload = {\n        channel_name: this.channel.name,\n        userhex: this.userHex,\n        message: this.state.text,\n      };\n      // TODO: must change on deployment...\n      var ENDPOINT;\n      if (process.env.NODE_ENV === 'development' ) {\n        ENDPOINT = 'http://localhost:5000/'\n      }\n      else {\n        ENDPOINT = 'https://virtual-bathroom.herokuapp.com/'\n      }\n      axios.post(ENDPOINT + 'message', payload);\n      this.setState({ text: '' });\n      this.scrollToBottom();\n    }\n    else {\n      this.setState({ text: e.target.value });\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"chatbox\" className=\"component-box\">\n        <h2>Chatbox</h2>\n        <div className=\"chatlist-container\">\n          <Chatlist chats={this.state.chats} />\n          <div style={{ float:\"left\", clear: \"both\" }}\n             ref={(el) => { this.messagesEnd = el; }}>\n          </div>\n        </div>\n        <input\n          type=\"text\"\n          value={this.state.text}\n          placeholder=\"chat here...\"\n          onChange={this.handleTextChange}\n          onKeyDown={this.handleTextChange}\n          />\n      </div>\n    );\n  }\n\n}\n","import React, { PureComponent } from 'react';\nimport Button from './Button';\nimport Chatbox from './Chatbox';\n\nexport default class RoomRight extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.channel = props.channel;\n    this.userHex = props.userHex;\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  handleNavigationClick(target) {\n    this.props.handleNavigationClick(target);\n  }\n\n  render() {\n    return (\n      <div id=\"stall-right\" className=\"view\">\n        <h2>Stall: Right</h2>\n        <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" />\n        <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n        <Chatbox userHex={this.userHex} channel={this.channel} />\n      </div>\n    );\n  }\n\n}\n","import React, { PureComponent } from 'react';\nimport Button from './Button';\n\nexport default class StallDown extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  // componentDidMount() {\n  //   console.log(`waiting room mounted`);\n  // }\n\n  handleNavigationClick(target) {\n    this.props.handleNavigationClick(target);\n  }\n\n  render() {\n    return (\n      <div id=\"stall-down\" className=\"view\">\n        <h2>Stall: Down</h2>\n        <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" />\n        <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n      </div>\n    );\n  }\n\n}\n","import React, { PureComponent } from 'react';\nimport Button from './Button';\n\nexport default class RoomBack extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  // componentDidMount() {\n  //   console.log(`waiting stall mounted`);\n  // }\n\n  handleNavigationClick(target) {\n    this.props.handleNavigationClick(target);\n  }\n\n  render() {\n    return (\n      <div id=\"stall-front\" className=\"view\">\n        <h2>Stall: Back</h2>\n        <Button onClick={() => this.handleNavigationClick('stall-front')} buttonText=\"Front\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-up')} buttonText=\"Up\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-left')} buttonText=\"Left\" />\n        <Button onClick={() => this.handleNavigationClick('stall-right')} buttonText=\"Right\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-down')} buttonText=\"Down\" /><br />\n        <Button onClick={() => this.handleNavigationClick('stall-back')} buttonText=\"Back\" /><br />\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\nimport StallFront from './StallFront';\nimport StallUp from './StallUp';\nimport StallLeft from './StallLeft';\nimport StallRight from './StallRight';\nimport StallDown from './StallDown';\nimport StallBack from './StallBack';\n\nclass Stall extends Component {\n  constructor(props) {\n    super(props);\n    this.pusher = props.pusher;\n    this.id = props.id;\n    this.presenceChannel = null;\n    this.me = null;\n    this.state = {\n      occupants: {count: 0},\n      userHex: '#ffffff',\n      currentView: 'stall-front',\n    };\n    this.max_occupancy = props.max;\n    this.updateOccupants = this.updateOccupants.bind(this);\n    this.countOccupants = this.countOccupants.bind(this);\n    this.handleNavigationClick = this.handleNavigationClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.presenceChannel = this.pusher.subscribe(`presence-room-${this.id}`);\n    this.presenceChannel.bind('pusher:subscription_succeeded', () => {\n      this.me = this.presenceChannel.members.me.id;\n      this.setState(currentState => {\n        return {\n          userHex: '#' + Math.floor(parseInt(this.presenceChannel.members.me.id)*16777215).toString(16).slice(-6)\n        }\n      });\n      this.updateOccupants(this.presenceChannel.members);\n    });\n    this.presenceChannel.bind('pusher:member_added', () => {\n      this.updateOccupants(this.presenceChannel.members);\n    });\n    this.presenceChannel.bind('pusher:member_removed', () => {\n      this.updateOccupants(this.presenceChannel.members);\n      console.log(`Stall.js: someone left Stall ${this.id}`);\n    });\n  }\n\n  // returns true count of occupants (excluding spies)\n  countOccupants(members) {\n    var count = 0;\n    // console.log(`countOccupants() members in stall ${this.id}:`);\n    if (members.count > 0) {\n      members.each(function (member) {\n        if (!member.info.isSpy) { count++ }\n      });\n    }\n    return count\n  }\n\n  updateOccupants(members) {\n    // console.log(`Stall.js updateOccupants: stall id ${this.id}, numOccupants ${members.count}`);\n    this.setState({\n      occupants: members,\n    }, () => this.props.onOccupancyChange(this.countOccupants(members), 'room', this.id));\n  }\n\n  handleNavigationClick(target) {\n    this.setState({ currentView: target });\n  }\n\n  render() {\n    const colorStyle = {\n      color: this.state.userHex,\n    }\n    var currentView = <StallFront handleNavigationClick={this.handleNavigationClick} />;\n    switch (this.state.currentView) {\n      case 'stall-up':\n        currentView = <StallUp handleNavigationClick={this.handleNavigationClick} />;\n        break;\n      case 'stall-left':\n        currentView = <StallLeft handleNavigationClick={this.handleNavigationClick} />;\n        break;\n      case 'stall-right': // contains chatbox\n        currentView = <StallRight channel={this.presenceChannel} userHex={this.state.userHex} handleNavigationClick={this.handleNavigationClick} />;\n        break;\n      case 'stall-down':\n        currentView = <StallDown handleNavigationClick={this.handleNavigationClick} />;\n        break;\n      case 'stall-back':\n        currentView = <StallBack handleNavigationClick={this.handleNavigationClick} />;\n        break;\n      case 'stall-front':\n      default:\n        currentView = <StallFront handleNavigationClick={this.handleNavigationClick} />;\n        break;\n    }\n    return (\n      <div id=\"room\">\n        <div>\n          <h2>Room {this.id}: {this.countOccupants(this.state.occupants)} / {this.max_occupancy}</h2>\n        </div>\n        {currentView}\n      </div>\n    );\n  }\n\n}\n\nexport default Stall;","import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport dotenv from 'dotenv';\n\nimport Hallway from './Hallway'\nimport WaitingRoom from './WaitingRoom';\nimport Room from './Room';\n\nimport './css/normalize.css';\nimport './css/App.css';\n\ndotenv.config({ path: '.env' });\nconst LOGGING = process.env.NODE_ENV === 'development';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.pusher = new Pusher(process.env.REACT_APP_PUSHER_APP_KEY, {\n      cluster: process.env.REACT_APP_PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    this.spy = new Pusher(process.env.REACT_APP_PUSHER_APP_KEY, {\n      encrypted: true,\n      cluster: process.env.REACT_APP_PUSHER_APP_CLUSTER,\n      auth: {\n        params: {\n          isSpy: true\n        }\n      }\n    });\n    this.me = null;\n    this.state = {\n      currentView: { type: 'hallway', id: null },\n      rooms: [], // array of Room components\n      pusher_app_members: { count: 0 }, // pusher members object\n      inLine: 0,\n      message: '',\n    };\n    this.max_occupancy = 2; // ADJUST AS NEEDED\n    this.num_rooms = 2; // ADJUST AS NEEDED\n    this.countMembers = this.countMembers.bind(this);\n    this.spyOn = this.spyOn.bind(this);\n    this.handleEnterBathroom = this.handleEnterBathroom.bind(this);\n    this.handleEnterRoom = this.handleEnterRoom.bind(this);\n    this.updateMemberCount = this.updateMemberCount.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.spyOn('presence-bathroom', 'waiting');\n    for (var i = 0; i < this.num_rooms; i++) {\n      this.spyOn(`presence-room-${i}`, 'room');\n    }\n    // main app channel\n    this.presenceChannel = this.pusher.subscribe('presence-app');\n    this.presenceChannel.bind('pusher:subscription_succeeded', () => {\n      this.me = this.presenceChannel.members.me.id;\n      this.updateAppMembers(this.presenceChannel.members);\n      if (LOGGING) { console.log(this.presenceChannel.members.me.id + ' subscribed to WaitingRoom'); }\n    });\n    this.presenceChannel.bind('pusher:member_added', () => {\n      this.updateAppMembers(this.presenceChannel.members);\n      if (LOGGING) {\n        console.log(`currentView: ${this.state.currentView}`);\n        console.log('someone joined Bathroom App');\n      }\n    });\n    // someone left App\n    this.presenceChannel.bind('pusher:member_removed', (member) => {\n      this.updateAppMembers(this.presenceChannel.members);\n      if (LOGGING) { console.log(`${member.id} left Bathroom App`); }\n    });\n  }\n\n  componentWillUnmount() {\n    this.pusher.unsubscribe('presence-app');\n  }\n\n  // returns a the number of members connected to channel\n  // excluding spies\n  countMembers(channel) {\n    if (LOGGING) { console.log(\"countMembers(): Current users in \" + channel.name + \":\"); }\n    var count = 0;\n    // var roomId = channel.name.split('-').pop();\n    channel.members.each(function (member) {\n      if (!member.info.isSpy) { console.log(\"user: \" + member.id); count++; }\n    });\n    return count\n  };\n\n  // generic 'true' member count (excludes spies)\n  updateMemberCount(num, location, roomId) {\n    if (location === 'room') {\n      var roomsCopy = Array.from(this.state.rooms);\n      roomsCopy[roomId] = { id: roomId, occupants: num };\n      this.setState(currentState => {\n        return {\n          rooms: roomsCopy,\n        }\n      });\n    }\n    else if (location === 'waiting') {\n      this.setState(currentState => {\n        return { inLine: num }\n      });\n    }\n  }\n\n  // in app\n  updateAppMembers(members) {\n    this.setState({\n      pusher_app_members: members,\n    });\n  }\n\n  // spy on a channel\n  spyOn(channelName, location) {\n    var channel = this.spy.subscribe(channelName);\n    var roomId = null;\n    if (location === 'room') {\n      roomId = channelName.split('-').pop();\n    }\n    if (LOGGING) {\n      console.log(`trying to spy on ${channel.name}`);\n    }\n    channel.bind(\"pusher:subscription_succeeded\", () => {\n      if (LOGGING) { console.log(`spying on ${channelName}`); }\n      this.updateMemberCount(this.countMembers(channel), location, roomId);\n    });\n    channel.bind(\"pusher:member_added\", () => {\n      this.updateMemberCount(this.countMembers(channel), location, roomId);\n    });\n    channel.bind(\"pusher:member_removed\", () => {\n      if (LOGGING) { console.log(`someone left ${channelName}`); }\n      this.updateMemberCount(this.countMembers(channel), location, roomId);\n    });\n  };\n\n  /* BEGIN: View transition functions \n    -----------------------------------\n  */\n  // hallway -> bathroom\n  handleEnterBathroom(e) {\n    this.setState(currentState => {\n      return {\n        currentView: { type: 'waiting', id: null },\n      }\n    })\n  }\n\n  // bathroom -> room\n  handleEnterRoom(e) {\n    var roomEntered = false;\n    this.pusher.unsubscribe('presence-bathroom');\n\n    for (var i = 0; !roomEntered && i < this.state.rooms.length; i++) {\n      var currentRoom = {...this.state.rooms[i]};\n      let roomId = i;\n      if (currentRoom.occupants < this.max_occupancy) {\n        this.updateMemberCount(currentRoom.occupants+1, 'room', i);\n        this.setState(currentState => {\n          return {\n            currentView: { type: 'room', id: roomId },\n          };\n        });\n        roomEntered = true;\n      }\n      else {\n        console.log(`Room ${i} full`);\n      }\n    }\n\n    if (!roomEntered) {\n      alert('no vacant rooms available!');\n    }\n  }\n\n  render() {\n    var hide = null;\n    // if (process.env.NODE_ENV === 'production') {\n    //   hide = 'hide';\n    // }\n    if (LOGGING) { console.log('render() rooms:') }\n    if (LOGGING) { console.log(this.state.rooms); hide = null }\n    console.log(`running in ${process.env.NODE_ENV} mode`);\n    const rooms = this.state.rooms.map((room) =>\n      <li key={room.id.toString()}><strong>Room {room.id}:</strong> {room.occupants}/{this.max_occupancy}</li>\n    );\n\n    // let visitorsList = [];\n    // if (this.state.pusher_app_members.count > 0) {\n    //   this.state.pusher_app_members.each((visitor) => \n    //     visitorsList.push(<li key={visitor.id.toString()}>{visitor.id}</li>)\n    //   );\n    // }\n    // default view is hallway\n    let currentView = <Hallway onEnterBathroom={this.handleEnterBathroom} />\n    if (this.state.currentView.type === 'waiting') { \n      currentView = <WaitingRoom onEnterRoom={this.handleEnterRoom} pusher={this.pusher} onOccupancyChange={this.updateMemberCount} />; \n    }\n    if (this.state.currentView.type === 'room') {\n      currentView = <Room id={this.state.currentView.id} pusher={this.pusher} max={this.max_occupancy} onOccupancyChange={this.updateMemberCount} />;\n    }\n    return (\n      <div id=\"app\">\n        <div id=\"debug-console\" className={hide}>\n          <div>\n            THE APP IS RUNNING IN <strong>{process.env.NODE_ENV}</strong> MODE<br/>\n            this box is for development purposes only\n          </div>\n          <div>\n            <div>Number of Rooms: {this.num_rooms}</div>\n            <div><strong>Current Users:</strong> {this.state.pusher_app_members.count}</div>\n            <div><strong>In line:</strong> {this.state.inLine}</div>\n          </div>\n          <div>\n            <strong>Rooms:</strong>\n            {rooms}\n          </div>\n        </div>\n        {currentView}\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}